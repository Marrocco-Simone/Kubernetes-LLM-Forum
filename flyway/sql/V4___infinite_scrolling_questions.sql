INSERT INTO courses (id, name, description) VALUES (4, 'Infinite Scrolling', 'A course on implementing infinite scrolling in web applications.');

INSERT INTO questions (course_id, title, text, user_uuid) VALUES
(4, 'Detecting Scroll Bottom', 'How do I detect when a user scrolls to the bottom of a page?', 'user-001'),
(4, 'Fetching Data for Scrolling', 'What is the best way to fetch new data for infinite scrolling?', 'user-002'),
(4, 'Throttling Scroll Requests', 'How can I throttle requests in an infinite scroll implementation?', 'user-003'),
(4, 'Content Suitability', 'Is infinite scrolling suitable for all types of content?', 'user-004'),
(4, 'React Implementation', 'How do I implement infinite scrolling in React?', 'user-005'),
(4, 'Accessibility Concerns', 'What are the accessibility concerns with infinite scrolling?', 'user-006'),
(4, 'Testing Scrolling Features', 'How to test an infinite scrolling feature?', 'user-007'),
(4, 'Scrolling vs Pagination', 'Infinite scrolling vs pagination: which one is better?', 'user-008'),
(4, 'Lazy Loading Integration', 'How to implement infinite scrolling with lazy loading?', 'user-009'),
(4, 'SEO Implications', 'What are the SEO implications of infinite scrolling?', 'user-010'),
(4, 'Back Navigation Handling', 'How to handle back button navigation in infinite scroll?', 'user-011'),
(4, 'Server-side Rendering Compatibility', 'Can infinite scrolling be made to work with server-side rendering?', 'user-012'),
(4, 'Loading Indicator Addition', 'How to add a loading indicator for infinite scrolling?', 'user-013'),
(4, 'Helpful Libraries', 'What libraries can help with implementing infinite scrolling?', 'user-014'),
(4, 'Memory Management', 'How to manage memory usage in an infinite scrolling application?', 'user-015'),
(4, 'Angular Implementation', 'How to implement infinite scrolling in Angular?', 'user-016'),
(4, 'Mobile App Challenges', 'What are the challenges of implementing infinite scrolling in mobile apps?', 'user-017'),
(4, 'Avoiding Duplicate Content', 'How to avoid duplicate content with infinite scrolling?', 'user-018'),
(4, 'Vue.js Implementation', 'How to implement infinite scrolling in Vue.js?', 'user-019'),
(4, 'User Experience Impact', 'What is the impact of infinite scrolling on user experience?', 'user-020'),
(4, 'Bidirectional Scrolling', 'How to implement bidirectional infinite scrolling?', 'user-021'),
(4, 'Performance Considerations', 'What are the performance considerations for infinite scrolling?', 'user-022'),
(4, 'REST API Integration', 'How to integrate infinite scrolling with a REST API?', 'user-023'),
(4, 'Best Practices', 'What are the best practices for implementing infinite scrolling?', 'user-024'),
(4, 'Error Handling', 'How to handle errors during data fetch in infinite scrolling?', 'user-025'),
(4, 'Variable Item Heights', 'How to implement infinite scrolling in a list with variable item heights?', 'user-026'),
(4, 'Scrolling Alternatives', 'What are the alternatives to infinite scrolling?', 'user-027'),
(4, 'Filtering and Sorting', 'How to make infinite scrolling work with filters and sorting?', 'user-028'),
(4, 'Common Pitfalls', 'What are the common pitfalls in implementing infinite scrolling?', 'user-029'),
(4, 'Data Consistency', 'How to ensure data consistency in an infinite scrolling application?', 'user-030');

INSERT INTO answers (question_id, text, user_uuid) VALUES
(10, 'You can listen to the scroll event and check if the scroll position is at the bottom.', 'answerer-001'),
(10, 'Using window.scrollY and document.body.offsetHeight to determine the scroll position.', 'answerer-002'),
(11, 'Fetch new data using AJAX calls when the user reaches the bottom of the page.', 'answerer-003'),
(11, 'Consider using a library like Axios for making HTTP requests more manageable.', 'answerer-004'),
(12, 'Throttle requests using lodash throttle function to limit how often a function can be called.', 'answerer-005'),
(12, 'Implement custom throttling logic with setTimeout to prevent over-fetching.', 'answerer-006'),
(13, 'It depends on the content type and user experience. Test with your audience.', 'answerer-007'),
(13, 'Not all content is suitable, especially if users need to find specific information quickly.', 'answerer-008'),
(14, 'Use the Intersection Observer API in React to create an infinite scrolling effect.', 'answerer-009'),
(14, 'React-virtualized is a great library for efficiently rendering large lists and tabular data.', 'answerer-010'),
(15, 'Ensure keyboard navigability and provide announcements for screen readers.', 'answerer-011'),
(15, 'Use ARIA landmarks to indicate loading more content.', 'answerer-012'),
(16, 'Automate scrolling in your tests to simulate user behavior.', 'answerer-013'),
(16, 'Use tools like Cypress for end-to-end testing of infinite scrolling.', 'answerer-014'),
(17, 'Pagination is better for SEO and usability, but infinite scrolling can enhance engagement.', 'answerer-015'),
(17, 'Consider user experience and content type when choosing between the two.', 'answerer-016'),
(18, 'Combine infinite scrolling with lazy loading images to improve performance.', 'answerer-017'),
(18, 'Use placeholders for lazy loading content to maintain layout stability.', 'answerer-018'),
(19, 'Use pushState to maintain URLs for different scroll positions.', 'answerer-019'),
(19, 'Implement sitemaps and pagination for SEO alongside infinite scrolling.', 'answerer-020'),
(20, 'Store the scroll position in sessionStorage and retrieve it on the back navigation.', 'answerer-021'),
(20, 'Use the History API to manage scroll positions and content loading.', 'answerer-022'),
(21, 'Yes, with Universal or Isomorphic JavaScript, you can pre-render the first few items server-side.', 'answerer-023'),
(21, 'Server-side rendering for the initial load combined with client-side for dynamic content.', 'answerer-024'),
(22, 'Implement a visual indicator at the bottom of the page when loading new content.', 'answerer-025'),
(22, 'Use CSS animations for a loading spinner to enhance user experience.', 'answerer-026'),
(23, 'Infinite Scroll and React Infinite Scroller are popular choices.', 'answerer-027'),
(23, 'Look into using vue-infinite-scroll for Vue.js applications.', 'answerer-028'),
(24, 'Unload offscreen content to free up memory or use virtualization.', 'answerer-029'),
(24, 'Implement a recycling mechanism for DOM elements to manage memory.', 'answerer-030'),
(25, 'Angular Material CDK provides utilities for building infinite scroll.', 'answerer-031'),
(25, 'Use ngx-infinite-scroll library for an easy Angular implementation.', 'answerer-032'),
(26, 'Touch events and screen sizes must be considered for mobile infinite scrolling.', 'answerer-033'),
(26, 'Optimize images and content loading for mobile data usage.', 'answerer-034'),
(27, 'Use unique identifiers for each piece of content to prevent duplication.', 'answerer-035'),
(27, 'Implement a check to see if the content already exists before appending it.', 'answerer-036'),
(28, 'Vue-infinite-loading is a great package for implementing infinite scrolling in Vue.js.', 'answerer-037'),
(28, 'Use the Intersection Observer API with Vue for a more native approach.', 'answerer-038'),
(29, 'It can improve engagement but may overwhelm users with too much content.', 'answerer-039'),
(29, 'Provide clear feedback and controls for the best user experience.', 'answerer-040'),
(30, 'Implementing bidirectional scrolling requires keeping track of both ends of the content.', 'answerer-041'),
(30, 'Use two separate triggers for loading content at the top and bottom.', 'answerer-042'),
(31, 'Optimize backend queries and use caching to improve performance.', 'answerer-043'),
(31, 'Frontend should only request and render what is needed to avoid slowdowns.', 'answerer-044'),
(32, 'Design your API endpoints to support pagination parameters for infinite scrolling.', 'answerer-045'),
(32, 'Use RESTful standards for fetching additional content dynamically.', 'answerer-046'),
(33, 'Follow accessibility guidelines and test with real users to find best practices.', 'answerer-047'),
(33, 'Monitor performance and user engagement metrics to refine your implementation.', 'answerer-048'),
(34, 'Gracefully handle errors by retrying requests or showing a message.', 'answerer-049'),
(34, 'Provide a manual reload option in case automatic fetching fails.', 'answerer-050'),
(35, 'Dynamic item heights require recalculating scroll positions as new content loads.', 'answerer-051'),
(35, 'Use a library that supports variable item sizes, like react-virtualized.', 'answerer-052'),
(36, 'Pagination, load more buttons, or anchor links can be alternatives.', 'answerer-053'),
(36, 'Consider user needs and content type when choosing an alternative.', 'answerer-054'),
(37, 'Maintain filter and sort state in the URL for consistency with infinite scrolling.', 'answerer-055'),
(37, 'Reapply filters and sorting each time new content is fetched.', 'answerer-056'),
(38, 'Common pitfalls include ignoring SEO, performance issues, and poor user experience.', 'answerer-057'),
(38, 'Failing to properly manage state or handle errors can frustrate users.', 'answerer-058'),
(39, 'Use timestamps or versioning to check for content updates.', 'answerer-059'),
(39, 'Implement optimistic updates for a smoother user experience.', 'answerer-060');